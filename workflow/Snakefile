import pathlib
import shutil
import os
import subprocess as subp
import pandas as pd

from snakemake.utils import validate

container: 'docker://votti/miniconda3mamba:v0.4.2'

# Define dependency on preprocessing workflows
subworkflow phys_preproc:
    workdir:
        "../../phys_preproc"
    snakefile:
        "../../phys_preproc/workflow/Snakefile"

subworkflow bf_preproc:
    workdir:
           "../../bf_preproc"
    snakefile:
             "../../bf_preproc/workflow/Snakefile"

# Read Configuration
configfile: 'config/config_phys_analysis.yml'
validate(config, "schemas/config_phys_analysis.schema.yml")

# Extract variables from configuration
## Input/output
fol_results = pathlib.Path('results')
fol_resources = pathlib.Path('resources')
fol_sp_config = fol_resources / 'spherpro_config'
fn_panel_src = '../phys_preproc/config/panel.csv'
fn_panel = fol_sp_config / 'panel.csv'

fn_sp_config = fol_sp_config / 'config.yml'
fol_db = fol_results / 'db'
fn_db = ancient(fol_db / 'spherpro.db')
fol_manual_qc = fol_results / 'manual_qc'
fol_manual_qc_raw = fol_manual_qc / 'raw'
fol_manual_qc_bad = fol_manual_qc / 'bad'
fn_manual_qc_dat = fol_resources / 'dat_badimgs.csv'

fn_bf_quantification = fol_resources / 'hq_spheres.csv'
fn_bf_qc = fol_resources / 'bfqc_manual_v1.csv'
# Create folders
fol_manual_qc.mkdir(parents=True, exist_ok=True)

fn_db_preprocessed = fol_db / 'dbpreprocess.done'
fn_db_manualqcapplied = fol_db / 'manualqcapplied.done'
fn_db_debarcoded = fol_db / 'debarcoded.done'
fn_db_bfqc = fol_db / 'bfqcapplied.done'
fn_db_d2rim = fol_db / 'd2rimapplied.done'
fn_db_cellclass = fol_db / 'cellsclassified.done'

# all preprocessing files needed:
folder_preproc_cp = pathlib.Path('results')
folder_preproc_cp = folder_preproc_cp / 'cpout'
## Define Output files
fn_cpout_image = folder_preproc_cp / 'Image.csv'
fn_cpout_cell = folder_preproc_cp / 'cell.csv'
fn_cpout_experiment = folder_preproc_cp / 'Experiment.csv'
fn_cpout_cyto = folder_preproc_cp / 'cyto.csv'
fn_cpout_nuclei = folder_preproc_cp / 'nuclei.csv'
fn_cpout_nucleiexp = folder_preproc_cp / 'nucleiexp.csv'
fn_cpout_objectrel = folder_preproc_cp / 'Object relationships.csv'
folder_cpout_imgs = folder_preproc_cp / 'imgs'
folder_cpout_masks = folder_preproc_cp / 'masks'
cp_measurements_output = [ancient(fn) for fn in (fn_cpout_objectrel,
                                        directory(folder_cpout_imgs), fn_cpout_image, fn_cpout_cell,
                                        fn_cpout_experiment,
                          fn_cpout_cyto, fn_cpout_nucleiexp, fn_cpout_nuclei,
                           directory(folder_cpout_masks))]

cp_measurements_output_srt = [ancient(phys_preproc(str(fn))) for fn in cp_measurements_output]


# Target rules
rule all:
    input: fn_panel

rule get_panel:
    input: fn_panel_src
    output: fn_panel
    run:
        shutil.copy(input[0], output[0])

# TODO: also link ome folder!
#rule get_cpout:
#    input: cp_measurements_output_srt
#    output: cp_measurements_output
#    run:
#        folder_preproc_cp.mkdir(exist_ok=True)
#        for s, t in zip(input, output):
#            # Somehow shutil copytree and co failed
#            # likely to to a NFS related error. Resorting
#            # to this workaround.
#            cmd = f'rsync -rts "{s}" "{pathlib.Path(t).parent}"'
#            subp.check_call(str(cmd), shell=True)

rule get_bf_quantification:
    input: bf_preproc('results/hq_spheres.csv')
    output:
        fn_bf_quantification
    shell:
        'cp {input} {output}'

rule get_bf_qc:
    input:'../bf_preproc/resources/bfqc_manual_1.csv'
    output:
          fn_bf_qc
    shell:
         'cp {input} {output}'

rule step2_init_database:
    input:
        fn_panel=fn_panel,
        fn_config=fn_sp_config,
        fns_cp = cp_measurements_output
    output:
        fn_db
    conda: 'envs/spherpro_env.yml'
    threads: 8
    resources:
             mem='32G',
             time='60'
    log:
        notebook='logs/2_initialize_spherbro.py.ipynb'
    notebook:
        'notebooks/2_initialize_spherbro.py.ipynb'

rule step3_1_preprocess_db:
    input:
         fn_panel=fn_panel,
         fn_config=fn_sp_config,
         fn_db=fn_db,
         fns_cp = cp_measurements_output
    output:
         touch(fn_db_preprocessed)
    conda: 'envs/spherpro_env.yml'
    threads: 8
    resources:
             mem='32G',
             time='60'
    log:
       notebook='logs/3_1_dbpreprocess.py.ipynb'
    notebook:
        'notebooks/3_1_dbpreprocess.py.ipynb'

rule step3_2_plot_manualqc_images:
    input:
         fn_panel=fn_panel,
         fn_config=fn_sp_config,
         fn_db=fn_db,
         fns_cp = cp_measurements_output,
         is_preprocessed=fn_db_preprocessed
    output:
         directory(fol_manual_qc_raw)
    conda: 'envs/spherpro_env.yml'
    threads: 8
    resources:
             mem='32G',
             time='60'
    log:
        notebook='logs/3_2_plot_manualqc_images.py.ipynb'
    notebook:
        'notebooks/3_2_plot_manualqc_images.py.ipynb'

rule step3_3_identify_manualqc_images:
    input:
         fn_panel=fn_panel,
         fn_config=fn_sp_config,
         fn_db=fn_db,
         fns_cp = cp_measurements_output,
         is_preprocessed=fn_db_preprocessed,
         fol_manual_qc_raw=fol_manual_qc_raw
    output:
         fn_manual_qc_dat
    conda: 'envs/spherpro_env.yml'
    threads: 8
    resources:
             mem='32G',
             time='60'
    log:
       notebook='logs/3_3_identify_manualqc.py.ipynb'
    notebook:
       "notebooks/3_3_identify_manualqc.py.ipynb"

rule step3_4_apply_manualqc_images:
    input:
         fn_panel=fn_panel,
         fn_config=fn_sp_config,
         fn_db=fn_db,
         fns_cp = cp_measurements_output,
         is_preprocessed=fn_db_preprocessed,
         fn_manual_qc_dat=ancient(fn_manual_qc_dat)
    output:
         touch(fn_db_manualqcapplied)
    conda: 'envs/spherpro_env.yml'
    threads: 8
    resources:
             mem='32G',
             time='60'
    log:
       notebook='logs/3_4_apply_manual_qc.py.ipynb'
    notebook:
       'notebooks/3_4_apply_manual_qc.py.ipynb'

rule step4_1_debarcode:
    input:
         fn_panel=fn_panel,
         fn_config=fn_sp_config,
         fn_db=fn_db,
         fns_cp = cp_measurements_output,
         is_preprocessed=fn_db_preprocessed,
         is_manualqc=fn_db_manualqcapplied
    output:
          touch(fn_db_debarcoded)
    conda: 'envs/spherpro_env.yml'
    threads: 8
    resources:
             mem='4G',
             time='60'
    log:
       notebook='logs/4_1_debarcode.py.ipynb'
    notebook:
        'notebooks/4_1_debarcode.py.ipynb'

rule step4_2_apply_bfqc:
    input:
         fn_config=fn_sp_config,
         fn_db=fn_db,
         fn_bf_qc = fn_bf_qc,
         is_debarcoded=fn_db_debarcoded
    output:
          touch(fn_db_bfqc)
    conda: 'envs/spherpro_env.yml'
    threads: 2
    resources:
             mem='4G',
             time='60'
    log:
       notebook='logs/4_2_apply_bfqc.py.ipynb'
    notebook:
        'notebooks/4_2_apply_bfqc.py.ipynb'

rule step4_3_correct2drim:
    input:
         fn_config=fn_sp_config,
         fn_db=fn_db,
         fn_bf_quantification = fn_bf_quantification,
         is_debarcoded=fn_db_bfqc
    output:
          touch(fn_db_d2rim)
    conda: 'envs/spherpro_env.yml'
    threads: 2
    resources:
             mem='4G',
             time='60'
    log:
       notebook='logs/4_3_correct2drim.py.ipynb'
    notebook:
       'notebooks/4_3_correct2drim.py.ipynb'

rule step4_4_add_cellstate_class:
    input:
         fn_config=fn_sp_config,
         fn_db=fn_db,
         is_d2rim=fn_db_d2rim
    output:
          touch(fn_db_cellclass)
    conda: 'envs/spherpro_env.yml'
    threads: 8
    resources:
             mem='64G',
             time='60'
    log:
       notebook='logs/4_4_add_cellstate_class.py.ipynb'
    notebook:
        'notebooks/4_4_add_cellstate_class.py.ipynb'

exp_celllines = ['T47D', '293T', 'HT29', 'DLD1']
exp_timepoints = ['72', '96']
exp_concentrations = ['0.25' , '0.5', '1.0']
perrep = [0,1]
res_types = ['stats', 'params']

fol_modstats = fol_results / 'modstats'
fol_modstats_percond = fol_modstats / 'percond'
fol_modstats.mkdir(exist_ok=True)
fol_modstats_percond.mkdir(exist_ok=True)
fn_modstats_run = str(fol_modstats_percond/ 'dat_mod_{res_types}_{cellline}_{tp}_{conc}_perrep{rep}.csv')
fn_modstats = str(fol_modstats / 'dat_mod_{res_types}_perrep{rep}.csv')

rule fit_marker_relations:
    input:
        fn_config=fn_sp_config,
        is_preproc=fn_db_d2rim
    output:
        fn_out_stats = expand(fn_modstats_run, res_types='stats', allow_missing=True),
        fn_out_params = expand(fn_modstats_run, res_types='params', allow_missing=True)
    conda: 'envs/spherpro_env.yml'
    threads: 2
    params:
        object_type='cell'
    script:
        'scripts/fit_marker_relations.py'

rule combine_marker_relations_stats:
    input:
        expand(fn_modstats_run,
            cellline=exp_celllines, tp=exp_timepoints,
            conc=exp_concentrations, allow_missing=True)
    output:
        fn_modstats
    run:
        dats = [pd.read_csv(inp) for inp in input]
        dat = pd.concat(dats)
        dat.to_csv(output[0])

rule step6_results_marker_relations:
    input:
        fn_config=fn_sp_config,
        is_preproc=fn_db_d2rim,
        fn_modstats = expand(fn_modstats, res_types='stats', rep=0)[0],
        fn_modstats_perrep = expand(fn_modstats, res_types='stats', rep=1)[0],
        fn_modstats_params = expand(fn_modstats, res_types='params', rep=0)[0],
        fn_panel_ord = fol_resources / 'pannel_ordered.csv',
        fn_bf_quantification = fn_bf_quantification
    conda: 'envs/spherpro_env.yml'
    threads: 8
    log:
        notebook='logs/6_1_results_marker_relations.py.ipynb'
    notebook:
        'notebooks/6_1_results_marker_relations.py.ipynb'

rule step6_celline_heatmap:
    input:
         fn_config=fn_sp_config,
         is_preproc=fn_db_d2rim,
         fn_modstats = expand(fn_modstats, res_types='stats', rep=0)[0],
         fn_modstats_perrep = expand(fn_modstats, res_types='stats', rep=1)[0],
         fn_modstats_params = expand(fn_modstats, res_types='params', rep=0)[0],
         fn_panel_ord = fol_resources / 'pannel_ordered.csv',
         fn_bf_quantification = fn_bf_quantification
    conda: 'envs/spherpro_env.yml'
    threads: 8
    log:
       notebook='logs/6_2_celline_heatmap.py.ipynb'
    notebook:
       'notebooks/6_2_celline_heatmap.py.ipynb'

rule all_modstats:
    input:
        expand(fn_modstats, res_types=res_types, rep=perrep)

# Varia
fol_local = pathlib.Path('/mnt/scratch/vitoz/Git/SpheroidPublication')
fol_cluster = pathlib.Path('vizano@cluster.s3it.uzh.ch:/scratch/vizano/SpheroidPublication')
rule sync_to_cluster:
    shell:
         f'rsync -rtu  {fol_local / "subworkflows/phys_analysis"} {fol_cluster / "subworkflows"} --progress --exclude=".*" --exclude="pkgs/" --exclude=".snakemake" --exclude="results/"'

rule sync_from_cluster:
    shell:
         f'rsync -rtu  {fol_cluster / "subworkflows/phys_analysis"} {fol_local / "subworkflows"}   --progress --exclude=".*" --exclude="phys/resources" --exclude "phys_analysis/pkgs"'
rule clean:
    shell:
        "rm -R {folder_base}"

# Data retrieval

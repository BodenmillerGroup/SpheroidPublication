import urllib.request
import pathlib
from imctools.converters import ome2analysis
from imctools.converters import exportacquisitioncsv
from imctools.converters import mcdfolder2imcfolder

from scripts import helpers as hpr
from snakemake.utils import validate

# Cellprofiler/Ilastik rules
include: 'rules/cellprofiler.smk'
include: 'rules/ilastik.smk'

# Read Configuration
configfile: 'config/config_phys.yml'
validate(config, "schemas/config_phys.schema.yml")

# Extract variables from configuration
## Input/output
input_data_folders = config['input_data_folders']
input_file_regexp = config['input_file_regexp']

## Panel
csv_panel = config['csv_panel']
csv_panel_metal = config['csv_panel_metal']
csv_panel_ilastik = config['csv_panel_ilastik']
csv_panel_full = config['csv_panel_full']
csv_panel_sphereseg = config['csv_panel_sphereseg']

# path
img_minsize = 50

## Ilastik run config
ilastik_container = config['ilastik_container']
ilastik_threads = config['ilastik_threads']
ilastik_mem_mb = config['ilastik_mem_mb']

# Cellprofiler default config
cellprofiler_container = config['cellprofiler_container']
cp_plugins = config['cellprofiler_plugins']

# Define hardcoded variables
## Define basic folder structrue
folder_base = pathlib.Path('results')

folder_zip = folder_base / 'zip'
folder_ome = folder_base / 'ome'
folder_analysis = folder_base / 'tiffs'
folder_sphere_full = folder_analysis / 'full'
folder_sphere_ilastik = folder_analysis / 'ilastik'
folder_sphere_align = folder_analysis / 'align'
folder_sphereseg_ilastik = folder_analysis / 'sphere_ilastik'
folder_sphereseg_ilastik_h5 = folder_analysis / 'sphere_ilastik_h5'
folder_sphereseg_ilastik_prob = folder_analysis / 'sphere_ilastik_prob'
folder_sphereseg_mask = folder_analysis / 'sphere_mask'

folder_spherecrop = folder_base / 'sphere_crops'
folder_spherecrop_tiff = folder_spherecrop / 'tiffs'
folder_spherecrop_ilastik_h5 = folder_spherecrop / 'cell_ilastik_h5'
folder_spherecrop_ilastik_prob = folder_spherecrop / 'cell_ilastik_prob'
folder_spherecrop_mask = folder_spherecrop / 'cell_ilastik_mask'
folder_spherecrop_ifstack = folder_spherecrop / 'if_stack'
folder_spherecrop_ifqcstack = folder_spherecrop / 'ifqc_stack'
folder_spherecrop_ifqcprob = folder_spherecrop / 'ifqc_prob'

folder_cp = folder_base / 'cpout'

folder_classifiers = folder_base / 'classifiers'

## Define Output files
fn_image = folder_cp / 'Image.csv'
fn_cell = folder_cp / 'cell.csv'
fn_experiment = folder_cp / 'Experiment.csv'
fn_object_rel = folder_cp / 'Object relationships.csv'

# Identify a dictionary of input folders/zips containing .mcd files to process
dict_zip_fns = {fn.stem: fn for fn in hpr.get_filenames_by_re(input_data_folders, input_file_regexp)}

# Produce a list of all cellprofiler output files
cp_measurements_output = [fn_image, fn_cell, fn_experiment, fn_object_rel]


## Define suffixes
suffix_full = '_full'
suffix_ilastik = '_ilastik'
suffix_scale = '_s2'
suffix_mask = '_mask'
suffix_probablities = '_Probabilities'
suffix_tiff = '.tiff'
suffix_csv = '.csv'
suffix_h5 = '.h5'
suffix_done = '.done'
suffix_crop = '_{crop, x[0-9]+_y[0-9]+_w[0-9]+_h[0-9]+}'
suffix_sphereseg = '_sphereseg'

## Define derived file patterns
pat_fn_zip = folder_base / 'zips' / ('{zipfol}' + '.zip')
pat_fn_mcdparse_done = folder_base / 'zips' / ('{zipfol}' + suffix_done)
fn_all_mcd_converted = folder_base / 'all_mcd_converted.done'

## Init dirs
folder_ome.mkdir(parents=True, exist_ok=True)

# Configuration for cellprofiler pipeline steps
# (Please look at rules/cellprofiler.smk for the documentation of this structure)
config_dict_cp = {
    'prepare_sphereseg': {
        'run_size': 20,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp_pipelines/1_prepare_spheresegilastik.cppipe',
        'input_files': [folder_sphereseg_ilastik],
        'output_patterns': {'sphereseg': directory(folder_sphereseg_ilastik_h5),
                            'align': directory(folder_sphere_align)}
    }
}

config_dict_ilastik = {
    'ilastik_spheres':
        {'project': 'resources/classifiers/sphere_segmentation.ilp',
         'run_size': 10,
         'output_format': 'tiff',
         'output_filename': f'{{nickname}}{suffix_probablities}{suffix_tiff}',
         'export_source': 'Probabilities',
         'export_dtype': 'uint16',
         'pipeline_result_drange': '"(0.0, 1.0)"',
         'input_files': folder_sphereseg_ilastik_h5,
         'output_pattern': directory(folder_sphereseg_ilastik_prob)
         }
}

config_dict_cp.update({
    'sphere_segment': {
        'run_size': 10,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp_pipelines/2_spheresegment.cppipe',
        'input_files': [folder_sphereseg_ilastik_prob],
        'output_patterns': {'.': directory(folder_sphereseg_mask)}
    },
    'sphere_crop': {
        'run_size': 20,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp_pipelines/3_spherecrop.cppipe',
        'input_files': [folder_sphereseg_mask, folder_sphere_full,
                        folder_sphere_ilastik, folder_sphere_align,
                        folder_sphereseg_ilastik_prob],
        'output_patterns': {'.': directory(folder_spherecrop_tiff)}
    },
    'prepare_cellilastik': {
        'run_size': 40,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp_pipelines/4_prepareilastik_imcspheres.cppipe',
        'input_files': [folder_spherecrop_tiff],
        'output_patterns': {'.': directory(folder_spherecrop_ilastik_h5)}
    }
})

config_dict_ilastik.update({
    'ilastik_cells':
        {'project': 'resources/classifiers/cell_segmentation.ilp',
         'run_size': 40,
         'output_format': 'tiff',
         'output_filename': f'{{nickname}}{suffix_probablities}{suffix_tiff}',
         'export_source': 'Probabilities',
         'export_dtype': 'uint16',
         'pipeline_result_drange': '"(0.0, 1.0)"',
         'input_files': folder_spherecrop_ilastik_h5,
         'output_pattern': directory(folder_spherecrop_ilastik_prob)
         }

})

config_dict_cp.update({
    'cell_segment': {
        'run_size': 10,
        'plugins': cp_plugins,
        'pipeline': 'resources/cp_pipelines/5_segment_imccells.cppipe',
        'input_files': [folder_spherecrop_ilastik_prob],
        'output_patterns': {'.': directory(folder_spherecrop_mask)}
    }
})

# Target rules
rule all:
    input: folder_spherecrop_mask

def get_zip_fn(wildcards):
    return dict_zip_fns[wildcards.zipfol]

rule retrieve_zip:
    output: pat_fn_zip
    params:
        fn = get_zip_fn
    shell:
        'cp {params.fn} {output[0]}'

# MCD to ome conversion
rule mcdfolder2imcfolder:
    input:
        fn_zip = pat_fn_zip
    output: touch(pat_fn_mcdparse_done)
    threads: 1
    params:
        fol_ome = folder_ome
    conda:
        'envs/env_imctools.yml'
    script:
        'scripts/convert_imcfolder.py'

checkpoint all_mcd_converted:
    input: expand(str(pat_fn_mcdparse_done), zipfol=dict_zip_fns.keys())
    output:
        touch(fn_all_mcd_converted)


# OME to analysis tiff conversion
rule ome2full:
    input:
        fol_ome = folder_ome,
        panel = csv_panel,
        done = fn_all_mcd_converted
    params:
        column_used = 'full',
        column_metal = csv_panel_metal,
        suffix = suffix_full,
        min_imgsize = img_minsize
    output:
        directory(folder_sphere_full)
    threads: 32
    conda:
         'envs/env_imctools.yml'
    script:
        'scripts/imc2analysis.py'

rule ome2ilastik:
    input:
        fol_ome = folder_ome,
        panel = csv_panel,
        done = fn_all_mcd_converted
    output:
        directory(folder_sphere_ilastik)
    conda:
         'envs/env_imctools.yml'
    params:
        column_used = 'ilastik',
        column_metal = csv_panel_metal,
        suffix = suffix_ilastik,
        min_imgsize = img_minsize
    threads: 32
    script:
          'scripts/imc2analysis.py'

rule ome2sphereseg:
    input:
         fol_ome = folder_ome,
         panel = csv_panel,
         done = fn_all_mcd_converted
    output:
          directory(folder_sphereseg_ilastik)
    conda:
         'envs/env_imctools.yml'
    params:
          column_used = 'sphereseg',
          column_metal = csv_panel_metal,
          suffix = suffix_sphereseg,
          min_imgsize = img_minsize
    threads: 32
    script:
          'scripts/imc2analysis.py'


## Rules to target Cellprofiler batch runs
define_cellprofiler_rules(config_dict_cp, folder_base, container_cp=cellprofiler_container)
define_ilastik_rules(config_dict_ilastik, folder_base, threads=ilastik_threads,
                     mem_mb=ilastik_mem_mb, container_ilastik=ilastik_container)

### Varia

rule clean:
    shell:
        "rm -R {folder_base}"